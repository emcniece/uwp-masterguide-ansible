# site-wp tasks :: New site WP setup
---

# Get next Redis db number
- name: Get Redis DB number
  when: use_wp == 'yes'
  shell: bash redis_db_num.sh
  args:
    chdir: "{{ playbookroot }}"
    executable: /bin/bash
  register: redis_dbnum

- name: Is WordPress downloaded?
  stat: path="{{ webroot }}/{{ site_url }}/public/index.php"
  register: wp_present
  when: use_wp == 'yes'

- name: WordPress Configured
  stat: path="{{ webroot }}/{{ site_url }}/public/wp-config.php"
  register: wp_configured
  when: use_wp == 'yes'

- name: Download WordPress
  when: use_wp == 'yes' and wp_present.stat.exists == False
  shell: wp core download --allow-root --path="{{ webroot }}/{{ site_url }}/public"
  args:
    executable: /bin/bash
  register: wp_downloaded

- name: File Ready Test
  when: wp_downloaded or wp_present.stat.exists == True
  set_fact: system_ready=true

- name: Read DB User
  when: use_wp == 'yes'
  command: "cat {{ webroot }}/{{ site_url }}/ansible_db_user.json"
  register: db_user

- name: Read DB Pass
  when: use_wp == 'yes'
  command: "cat {{ webroot }}/{{ site_url }}/ansible_db_pass.json"
  register: db_pass

- name: Configure WordPress
  when: use_wp == 'yes' and system_ready and wp_configured.stat.exists == False and db_user is defined and db_pass is defined
  shell: wp core config --allow-root --path="{{ webroot }}/{{ site_url }}/public" --dbname="{{db_user.stdout}}" --dbuser="{{db_user.stdout}}" --dbpass="{{db_pass.stdout}}"

- name: Install WordPress
  when: use_wp == 'yes' and system_ready
  shell: wp core install --allow-root --path="{{ webroot }}/{{ site_url }}/public" --url="http://{{site_url}}" --title='{{site_url}}' --admin_user="{{ wp_email.split('@')[0] }}" --admin_email="{{wp_email}}" --admin_password="{{wp_pass}}"

- name: Install Plugins
  when: use_wp == 'yes' and system_ready
  shell: "wp plugin install {{ item }} --allow-root --path={{ webroot }}/{{ site_url }}/public && wp plugin activate {{item}} --allow-root --path={{ webroot }}/{{ site_url }}/public"
  with_items:
  - nginx-helper
  - redis-cache
  - mailgun
  - wordpress-seo

- name: Update Permissions
  when: use_wp == 'yes'
  #command: "chown -R {{sysgroup}}:{{sysgroup}} {{ webroot }}/{{ site_url }}/public"
  file:
    path="{{ webroot }}/{{ site_url }}/public"
    state=directory
    group="{{ sysgroup }}"
    owner="{{ sysgroup }}"
    recurse=yes

- name: Add WP Config Defines
  when: use_wp == 'yes' and system_ready
  blockinfile:
    dest: "{{ webroot }}/{{ site_url }}/public/wp-config.php"
    insertafter: "<\\?php"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: CONFIG"
    content: |
      define('DISABLE_WP_CRON', true);
      define('RT_WP_NGINX_HELPER_CACHE_PATH', '{{ webroot }}/{{ site_url }}/cache/');
      define('WP_REDIS_DATABASE', {{redis_dbnum.stdout}});
      define('WP_REDIS_PASSWORD', '{{redis_pass}}');


- name: Add WP Mandrill Defines
  when: use_wp == 'yes' and system_ready and use_mailgun == 'yes' and mailgun_domain.json.sending_dns_records is defined
  blockinfile:
    dest: "{{ webroot }}/{{ site_url }}/public/wp-config.php"
    insertafter: "<\\?php"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: MANDRILL"
    content: |
      define('MAILGUN_USEAPI', true);
      define('MAILGUN_APIKEY', '{{ mailgun_api_key }}');
      define('MAILGUN_DOMAIN', '{{ site_url }}');
      define('MAILGUN_USERNAME', '{{mailgun_domain.json.domain.smtp_login }}');
      define('MAILGUN_PASSWORD', '{{mailgun_domain.json.domain.smtp_password }}');



